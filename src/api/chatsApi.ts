// src/api/chatsApi.ts

import { HTTPTransport } from './http'

const http = new HTTPTransport()

export const chatsApi = {
  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
  async getChats () {
    return await http.get<Array<{ id: number, title: string, avatar: string | null, unread_count?: number, last_message?: { content: string, time: string } | null }>>('/chats')
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
  async createChat (data: { title: string }) {
    return await http.post('/chats', data)
  },

  // –£–¥–∞–ª–∏—Ç—å —á–∞—Ç
  async deleteChat (chatId: number) {
    return await http.delete('/chats', { chatId })
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞
  async getChatUsers (chatId: number) {
    return await http.get(`/chats/${chatId}/users`)
  },

  // –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ–π) –≤ —á–∞—Ç –ø–æ ID
  async addUserToChat (data: { users: number[], chatId: number }) {
    console.log('üì§ [chatsApi] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç:', data)
    return await http.put('/chats/users', data)
      .then(result => {
        console.log('‚úÖ [chatsApi] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã:', result)
        return result
      })
      .catch(error => {
        console.error('‚ùå [chatsApi] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
        throw error
      })
  },

  // –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ–π) –∏–∑ —á–∞—Ç–∞ –ø–æ ID
  async removeUserFromChat (data: { users: number[], chatId: number }) {
    console.log('üì§ [chatsApi] –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —á–∞—Ç–∞:', data)
    return await http.delete('/chats/users', data)
      .then(result => {
        console.log('‚úÖ [chatsApi] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã:', result)
        return result
      })
      .catch(error => {
        console.error('‚ùå [chatsApi] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
        throw error
      })
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è WebSocket
  async getToken (chatId: number) {
    return await http.post<{ token: string }>(`/chats/token/${chatId}`)
  }
}
